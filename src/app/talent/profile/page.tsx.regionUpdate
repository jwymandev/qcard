// Add this new section to the existing talent profile page

// Add this to the imports
import { useEffect, useState } from 'react';

// Add this to the existing Profile interface
interface Profile {
  // existing properties...
  regions: Region[];
}

// Add this new interface
interface Region {
  id: string;
  name: string;
  description?: string;
}

// Add this to the form data state
const [formData, setFormData] = useState({
  // existing properties...
  regionIds: [] as string[],
});

// Add this new state
const [availableRegions, setAvailableRegions] = useState<Region[]>([]);

// Add this to useEffect
useEffect(() => {
  fetchRegions();
}, []);

// Add this after fetchLocations function
const fetchRegions = async () => {
  try {
    const response = await fetch('/api/regions');
    
    if (!response.ok) {
      throw new Error('Failed to fetch regions');
    }
    
    const data = await response.json();
    setAvailableRegions(data);
  } catch (error) {
    console.error('Error fetching regions:', error);
  }
};

// When initializing formData from profile:
useEffect(() => {
  if (profile) {
    setFormData({
      // existing properties...
      regionIds: profile.regions.map(region => region.id),
    });
  }
}, [profile]);

// Add these handlers:
const handleRegionSelect = (e: React.ChangeEvent<HTMLSelectElement>) => {
  const selectedId = e.target.value;
  if (selectedId && !formData.regionIds.includes(selectedId)) {
    setFormData({
      ...formData,
      regionIds: [...formData.regionIds, selectedId],
    });
  }
};

const handleRegionRemove = (regionId: string) => {
  setFormData({
    ...formData,
    regionIds: formData.regionIds.filter(id => id !== regionId),
  });
};

// Add this to the JSX after the locations section
<div className="bg-white rounded-lg shadow overflow-hidden">
  <div className="p-6">
    <h2 className="text-xl font-semibold mb-4">Preferred Regions</h2>
    <p className="text-sm text-gray-600 mb-4">
      Select the regions where you're available for casting calls. This helps us show you the most relevant opportunities.
    </p>
    
    <select
      value=""
      onChange={handleRegionSelect}
      className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-blue-500 focus:border-blue-500 mb-3"
    >
      <option value="">Add a region...</option>
      {availableRegions.map(region => (
        <option key={region.id} value={region.id}>
          {region.name}
        </option>
      ))}
    </select>
    
    <div className="mt-2 flex flex-wrap gap-2">
      {formData.regionIds.map(regionId => {
        const region = availableRegions.find(r => r.id === regionId);
        return region ? (
          <div
            key={region.id}
            className="bg-blue-100 text-blue-800 px-3 py-1 rounded-full text-sm flex items-center"
          >
            {region.name}
            <button
              type="button"
              onClick={() => handleRegionRemove(region.id)}
              className="ml-2 text-blue-600 hover:text-blue-800 focus:outline-none"
            >
              &times;
            </button>
          </div>
        ) : null;
      })}
    </div>
  </div>
</div>

// Also add regions to the read-only view
{profile.regions.length > 0 && (
  <div className="mt-4">
    <h3 className="text-sm font-medium text-gray-500">Preferred Regions</h3>
    <div className="mt-1 flex flex-wrap gap-2">
      {profile.regions.map(region => (
        <span
          key={region.id}
          className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-blue-100 text-blue-800"
        >
          {region.name}
        </span>
      ))}
    </div>
  </div>
)}