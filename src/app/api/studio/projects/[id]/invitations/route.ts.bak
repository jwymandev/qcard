import { prisma } from '@/lib/db';
import { authPrisma } from '@/lib/secure-db-connection';
import { auth } from '@/auth';
import { NextResponse } from 'next/server';
import { z } from 'zod';
import crypto from 'crypto';

// Validation schema for talent invitations
const invitationSchema = z.object({
  talentIds: z.array(z.string()).min(1, "At least one talent must be selected"),
  message: z.string().optional(),
});

// GET /api/studio/projects/[id]/invitations - Get all invitations for a project
export async function GET(
  request: Request,
  { params }: { params: { id: string } }
) {
  try {
    const session = await auth();
    
    if (!session?.user?.id) {
      return NextResponse.json({ error: "Unauthorized" }, { status: 401 });
    }
    
    // Find the user and their tenant
    const user = await authPrisma.user.findUnique({
      where: { id: session.user.id },
      include: { Tenant: true },
    });
    
    if (!user?.Tenant || user.Tenant.type !== "STUDIO") {
      return NextResponse.json({ error: "Only studio accounts can access invitations" }, { status: 403 });
    }
    
    // Find the studio associated with this tenant
    const studio = await prisma.studio.findFirst({
      where: { tenantId: user.Tenant.id },
    });
    
    if (!studio) {
      return NextResponse.json({ error: "Studio not found" }, { status: 404 });
    }
    
    const projectId = params.id;
    
    // Check if the project belongs to this studio
    const project = await prisma.project.findFirst({
      where: { 
        id: projectId,
        studioId: studio.id
      },
    });
    
    if (!project) {
      return NextResponse.json({ error: "Project not found or unauthorized" }, { status: 403 });
    }
    
    // For projects, invitations are tracked through messages
    const invitations = await prisma.message.findMany({
      where: {
        relatedToProjectId: projectId,
        studioSenderId: studio.id,
      },
      include: {
        Profile_Message_talentReceiverIdToProfile: {
          include: {
            User: {
              select: {
                firstName: true,
                lastName: true,
                email: true,
              }
            }
          }
        }
      },
      orderBy: { createdAt: 'desc' },
    });
    
    // Also get information about talents that have joined the project
    const projectMembers = await prisma.projectMember.findMany({
      where: {
        projectId: projectId,
        Profile: {
          id: {
            in: invitations.map(inv => inv.talentReceiverId).filter(Boolean) as string[]
          }
        }
      },
      select: {
        profileId: true,
        role: true,
        createdAt: true,
      }
    });
    
    // Combine invitation data with project member status
    const invitationsWithStatus = invitations.map(invitation => {
      const member = projectMembers.find(
        m => m.profileId === invitation.talentReceiverId
      );
      
      return {
        ...invitation,
        hasJoined: !!member,
        role: member?.role || null,
        joinDate: member?.createdAt || null,
        talent: invitation.Profile_Message_talentReceiverIdToProfile ? {
          id: invitation.Profile_Message_talentReceiverIdToProfile.id,
          name: `${invitation.Profile_Message_talentReceiverIdToProfile.User.firstName} ${invitation.Profile_Message_talentReceiverIdToProfile.User.lastName}`,
          email: invitation.Profile_Message_talentReceiverIdToProfile.User.email,
        } : null
      };
    });
    
    return NextResponse.json(invitationsWithStatus);
  } catch (error) {
    console.error("Error fetching project invitations:", error);
    return NextResponse.json({ 
      error: "Failed to fetch project invitations",
      details: error instanceof Error ? error.message : String(error)
    }, { status: 500 });
  }
}

// POST /api/studio/projects/[id]/invitations
export async function POST(
  request: Request,
  { params }: { params: { id: string } }
) {
  try {
    const session = await auth();
    
    if (!session?.user?.id) {
      return NextResponse.json({ error: "Unauthorized" }, { status: 401 });
    }
    
    // Validate projectId
    const projectId = params.id;
    if (!projectId) {
      return NextResponse.json({ error: "Project ID is required" }, { status: 400 });
    }
    
    // Get request body
    const body = await request.json();
    
    // Validate request data
    const validationResult = invitationSchema.safeParse(body);
    if (!validationResult.success) {
      return NextResponse.json({ 
        error: "Invalid request data",
        details: validationResult.error.format() 
      }, { status: 400 });
    }
    
    const { talentIds, message } = validationResult.data;
    
    // Find the user's tenant
    const user = await authPrisma.user.findUnique({
      where: { id: session.user.id },
      include: { Tenant: true }
    });
    
    if (!user?.Tenant || user.Tenant.type !== "STUDIO") {
      return NextResponse.json({ error: "Only studio accounts can send talent invitations" }, { status: 403 });
    }
    
    // Find the studio
    const studio = await prisma.studio.findFirst({
      where: { tenantId: user.Tenant.id }
    });
    
    if (!studio) {
      return NextResponse.json({ error: "Studio not found" }, { status: 404 });
    }
    
    // Verify the project belongs to this studio
    const project = await prisma.project.findFirst({
      where: {
        id: projectId,
        studioId: studio.id
      }
    });
    
    if (!project) {
      return NextResponse.json({ error: "Project not found or you don't have permission to access it" }, { status: 404 });
    }
    
    // Find all the profiles for the talent IDs
    const talentProfiles = await prisma.profile.findMany({
      where: {
        id: { in: talentIds },
        User: {
          Tenant: {
            type: "TALENT"
          }
        }
      },
      include: {
        User: {
          select: {
            id: true,
            email: true,
            firstName: true,
            lastName: true
          }
        }
      }
    });
    
    if (talentProfiles.length === 0) {
      return NextResponse.json({ error: "No valid talent profiles found" }, { status: 400 });
    }
    
    // Create a personalized invite message for each talent
    const inviteMessage = message || `You've been invited to join project: ${project.title}. Please check your dashboard for more details.`;
    
    // Create messages for each talent as project invitations
    const messageTransactions = talentProfiles.map(profile => 
      prisma.message.create({
        data: {
          id: crypto.randomUUID(),
          subject: `Invitation to join project: ${project.title}`,
          content: inviteMessage,
          studioSenderId: studio.id,
          talentReceiverId: profile.id,
          relatedToProjectId: projectId,
          isRead: false,
        }
      })
    );
    
    const createdInvitations = await prisma.$transaction(messageTransactions);
    
    return NextResponse.json({
      message: "Invitations sent successfully",
      count: createdInvitations.length,
      invitations: createdInvitations.map((invite) => ({
        id: invite.id,
        subject: invite.subject,
        createdAt: invite.createdAt
      }))
    });
    
  } catch (error) {
    console.error("Error creating project invitations:", error);
    return NextResponse.json({ 
      error: "Failed to send invitations",
      details: error instanceof Error ? error.message : String(error)
    }, { status: 500 });
  }
}