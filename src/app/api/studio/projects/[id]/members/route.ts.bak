import { prisma } from '@/lib/db';
import { authPrisma } from '@/lib/secure-db-connection';
import { NextResponse } from 'next/server';
import { auth } from '@/auth';
import { z } from 'zod';
import crypto from 'crypto';

// Validation schema for adding a member to a project
const addMemberSchema = z.object({
  profileId: z.string().uuid({ message: "Invalid profile ID format" }),
  role: z.string().optional(),
  notes: z.string().optional(),
});

// Helper function to check if a studio has access to a project
async function canAccessProject(userId: string, projectId: string) {
  const user = await authPrisma.user.findUnique({
    where: { id: userId },
    include: { Tenant: true },
  });
  
  if (!user?.Tenant || user.Tenant.type !== "STUDIO") {
    return false;
  }
  
  const studio = await prisma.studio.findFirst({
    where: { tenantId: user.Tenant.id },
  });
  
  if (!studio) {
    return false;
  }
  
  const project = await prisma.project.findFirst({
    where: {
      id: projectId,
      studioId: studio.id,
    },
  });
  
  return !!project;
}

// GET /api/studio/projects/[id]/members - Get all members of a project
export async function GET(request: Request, { params }: { params: { id: string } }) {
  const session = await auth();
  
  if (!session?.user?.id) {
    return NextResponse.json({ error: "Unauthorized" }, { status: 401 });
  }
  
  try {
    const { id } = params;
    
    if (!await canAccessProject(session.user.id, id)) {
      return NextResponse.json({ error: "Unauthorized to access this project" }, { status: 403 });
    }
    
    const members = await prisma.projectMember.findMany({
      where: { projectId: id },
      include: {
        Profile: {
          include: {
            User: {
              select: {
                firstName: true,
                lastName: true,
                email: true,
              }
            },
            Skill: true,
          }
        }
      },
    });
    
    return NextResponse.json(members);
  } catch (error) {
    console.error("Error fetching project members:", error);
    return NextResponse.json({ error: "Failed to fetch project members" }, { status: 500 });
  }
}

// POST /api/studio/projects/[id]/members - Add a new member to a project
export async function POST(request: Request, { params }: { params: { id: string } }) {
  const session = await auth();
  
  if (!session?.user?.id) {
    return NextResponse.json({ error: "Unauthorized" }, { status: 401 });
  }
  
  try {
    const { id: projectId } = params;
    const body = await request.json();
    
    if (!await canAccessProject(session.user.id, projectId)) {
      return NextResponse.json({ error: "Unauthorized to access this project" }, { status: 403 });
    }
    
    // Validate input data
    const result = addMemberSchema.safeParse(body);
    if (!result.success) {
      return NextResponse.json(
        { error: "Invalid input data", details: result.error.format() },
        { status: 400 }
      );
    }
    
    const { profileId, role, notes } = result.data;
    
    // Check if profile exists
    const profile = await prisma.profile.findUnique({
      where: { id: profileId },
    });
    
    if (!profile) {
      return NextResponse.json({ error: "Profile not found" }, { status: 404 });
    }
    
    // Check if member already exists in this project
    const existingMember = await prisma.projectMember.findFirst({
      where: {
        projectId,
        profileId,
      },
    });
    
    if (existingMember) {
      return NextResponse.json(
        { error: "This person is already a member of the project" },
        { status: 400 }
      );
    }
    
    // Add member to project
    const member = await prisma.projectMember.create({
      data: {
        id: crypto.randomUUID(),
        Project: { connect: { id: projectId } },
        Profile: { connect: { id: profileId } },
        role,
        notes,
        updatedAt: new Date(),
      },
      include: {
        Profile: {
          include: {
            User: {
              select: {
                firstName: true,
                lastName: true,
                email: true,
              }
            },
          }
        }
      },
    });
    
    return NextResponse.json(member, { status: 201 });
  } catch (error) {
    console.error("Error adding project member:", error);
    return NextResponse.json({ error: "Failed to add project member" }, { status: 500 });
  }
}