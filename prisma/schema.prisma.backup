generator client {
  provider = "prisma-client-js"
  // This ensures the client matches the exact DB shape, important for SQLite
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  User              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Application {
  id            String      @id
  status        String      @default("PENDING")
  message       String?
  profileId     String
  castingCallId String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime
  CastingCall   CastingCall @relation(fields: [castingCallId], references: [id])
  Profile       Profile     @relation(fields: [profileId], references: [id])
}

model CastingCall {
  id               String        @id
  title            String
  description      String
  requirements     String?
  compensation     String?
  startDate        DateTime?
  endDate          DateTime?
  status           String        @default("OPEN")
  studioId         String
  locationId       String?
  projectId        String?
  regionId         String?       // Primary region for this casting call
  createdAt        DateTime      @default(now())
  updatedAt        DateTime
  // New filterable fields
  compensationType String        @default("UNSPECIFIED")
  experienceLevel  String        @default("ANY")
  ageRange         String?
  gender           String        @default("ANY")
  roleType         String        @default("UNSPECIFIED")
  // Relations
  Application      Application[]
  Project          Project?      @relation(fields: [projectId], references: [id])
  Location         Location?     @relation(fields: [locationId], references: [id])
  Studio           Studio        @relation(fields: [studioId], references: [id])
  Skill            Skill[]
  region           Region?       @relation(fields: [regionId], references: [id])
  
  // Indexes for faster filtering
  @@index([compensationType])
  @@index([roleType])
  @@index([experienceLevel])
  @@index([gender])
  @@index([regionId])
}

model Location {
  id          String        @id
  name        String
  regionId    String?       // Foreign key to Region
  createdAt   DateTime      @default(now())
  updatedAt   DateTime
  CastingCall CastingCall[]
  Scene       Scene[]
  Profile     Profile[]
  Studio      Studio[]
  // Relations
  region      Region?       @relation(fields: [regionId], references: [id])
}

model Message {
  id                                        String   @id
  content                                   String
  subject                                   String   @default("New Message")
  isRead                                    Boolean  @default(false)
  isArchived                                Boolean  @default(false)
  studioSenderId                            String?
  talentReceiverId                          String?
  talentSenderId                            String?
  studioReceiverId                          String?
  relatedToProjectId                        String?
  relatedToCastingCallId                    String?
  createdAt                                 DateTime @default(now())
  Studio_Message_studioReceiverIdToStudio   Studio?  @relation("Message_studioReceiverIdToStudio", fields: [studioReceiverId], references: [id])
  Profile_Message_talentSenderIdToProfile   Profile? @relation("Message_talentSenderIdToProfile", fields: [talentSenderId], references: [id])
  Profile_Message_talentReceiverIdToProfile Profile? @relation("Message_talentReceiverIdToProfile", fields: [talentReceiverId], references: [id])
  Studio_Message_studioSenderIdToStudio     Studio?  @relation("Message_studioSenderIdToStudio", fields: [studioSenderId], references: [id])
}

model Payment {
  id        String   @id
  amount    Float
  currency  String   @default("usd")
  status    String   @default("PENDING")
  studioId  String?
  userId    String?
  stripeId  String?  @unique
  createdAt DateTime @default(now())
  updatedAt DateTime
  User      User?    @relation(fields: [userId], references: [id])
  Studio    Studio?  @relation(fields: [studioId], references: [id])
}

model Profile {
  id                                        String                      @id
  userId                                    String                      @unique
  headshotUrl                               String?
  bio                                       String?
  height                                    String?
  weight                                    String?
  hairColor                                 String?
  eyeColor                                  String?
  availability                              Boolean                     @default(true)
  createdAt                                 DateTime                    @default(now())
  updatedAt                                 DateTime
  ethnicity                                 String?
  experience                                String?
  gender                                    String?
  languages                                 String?
  dateOfBirth                               DateTime?
  Application                               Application[]
  Message_Message_talentSenderIdToProfile   Message[]                   @relation("Message_talentSenderIdToProfile")
  Message_Message_talentReceiverIdToProfile Message[]                   @relation("Message_talentReceiverIdToProfile")
  User                                      User                        @relation(fields: [userId], references: [id], onDelete: Cascade)
  ProfileImage                              ProfileImage[]
  ProjectMember                             ProjectMember[]
  SceneTalent                               SceneTalent[]
  StudioNote                                StudioNote[]
  Location                                  Location[]
  Skill                                     Skill[]
  QuestionnaireInvitation                   QuestionnaireInvitation[]
  QuestionnaireResponse                     QuestionnaireResponse[]
  convertedFromExternalActor                ExternalActor[]
  projectInvitations                        ProjectInvitation[]
  castingSubmissions                        CastingSubmission[]
  // Region relationship
  regions                                   ProfileRegion[]
}

model ProfileImage {
  id        String   @id
  url       String
  isPrimary Boolean  @default(false)
  profileId String
  createdAt DateTime @default(now())
  updatedAt DateTime
  Profile   Profile  @relation(fields: [profileId], references: [id], onDelete: Cascade)
}

model Project {
  id                 String                @id
  title              String
  description        String?
  startDate          DateTime?
  endDate            DateTime?
  status             String                @default("PLANNING")
  studioId           String
  isArchived         Boolean               @default(false)
  createdAt          DateTime              @default(now())
  updatedAt          DateTime
  CastingCall        CastingCall[]
  Studio             Studio                @relation(fields: [studioId], references: [id])
  ProjectMember      ProjectMember[]
  Scene              Scene[]
  ProjectInvitation  ProjectInvitation[]
  externalActors     ExternalActorProject[]
  castingCodes       CastingCode[]
  talentRequirements TalentRequirement[]
}

model ProjectMember {
  id        String   @id
  role      String?
  notes     String?
  projectId String
  profileId String
  createdAt DateTime @default(now())
  updatedAt DateTime
  Profile   Profile  @relation(fields: [profileId], references: [id])
  Project   Project  @relation(fields: [projectId], references: [id])
}

model ProjectInvitation {
  id              String    @id @default(uuid())
  projectId       String
  profileId       String
  status          String    @default("PENDING") // PENDING, ACCEPTED, DECLINED
  message         String?
  role            String?
  messageId       String?   // Reference to message that created this invitation
  sentAt          DateTime  @default(now())
  respondedAt     DateTime?
  expiresAt       DateTime?
  project         Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  profile         Profile   @relation(fields: [profileId], references: [id], onDelete: Cascade)
}

model Scene {
  id                String              @id
  projectId         String
  title             String
  description       String?
  locationId        String?
  shootDate         DateTime?
  duration          Int?
  talentNeeded      Int?
  status            String              @default("PLANNING")
  createdAt         DateTime            @default(now())
  updatedAt         DateTime
  Location          Location?           @relation(fields: [locationId], references: [id])
  Project           Project             @relation(fields: [projectId], references: [id])
  SceneTalent       SceneTalent[]
  SceneExternalActor SceneExternalActor[]
}

model SceneTalent {
  id        String   @id
  sceneId   String
  profileId String
  role      String?
  notes     String?
  status    String   @default("CONFIRMED")
  createdAt DateTime @default(now())
  updatedAt DateTime
  Profile   Profile  @relation(fields: [profileId], references: [id])
  Scene     Scene    @relation(fields: [sceneId], references: [id])
}

model SceneExternalActor {
  id             String       @id @default(uuid())
  sceneId        String
  externalActorId String
  role           String?
  notes          String?
  status         String       @default("CONFIRMED")
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  externalActor  ExternalActor @relation(fields: [externalActorId], references: [id], onDelete: Cascade)
  scene          Scene        @relation(fields: [sceneId], references: [id], onDelete: Cascade)
}

model Session {
  id           String   @id
  sessionToken String   @unique
  userId       String
  expires      DateTime
  User         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Skill {
  id          String        @id
  name        String        @unique
  createdAt   DateTime      @default(now())
  updatedAt   DateTime
  CastingCall CastingCall[]
  Profile     Profile[]
}

model Studio {
  id                                       String                  @id
  name                                     String
  description                              String?
  tenantId                                 String                  @unique
  contactName                              String?
  contactEmail                             String?
  contactPhone                             String?
  website                                  String?
  createdAt                                DateTime                @default(now())
  updatedAt                                DateTime
  CastingCall                              CastingCall[]
  Message_Message_studioReceiverIdToStudio Message[]               @relation("Message_studioReceiverIdToStudio")
  Message_Message_studioSenderIdToStudio   Message[]               @relation("Message_studioSenderIdToStudio")
  Payment                                  Payment[]
  Project                                  Project[]
  Tenant                                   Tenant                  @relation(fields: [tenantId], references: [id])
  StudioNote                               StudioNote[]
  Location                                 Location[]
  Questionnaire                            Questionnaire[]
  externalActors                           ExternalActor[]
  castingCodes                             CastingCode[]
  // Subscription relationships
  subscriptions                            Subscription[]
  // Region relationship
  regions                                  StudioRegion[]
}

model StudioNote {
  id        String   @id
  content   String
  studioId  String
  profileId String
  createdAt DateTime @default(now())
  updatedAt DateTime
  Profile   Profile  @relation(fields: [profileId], references: [id], onDelete: Cascade)
  Studio    Studio   @relation(fields: [studioId], references: [id], onDelete: Cascade)
}

model Tenant {
  id        String   @id
  name      String
  type      String
  createdAt DateTime @default(now())
  updatedAt DateTime
  Studio    Studio?
  User      User[]
}

// Define user roles
enum UserRole {
  USER
  ADMIN
  SUPER_ADMIN
}

model User {
  id                   String                 @id
  email                String                 @unique
  password             String?
  firstName            String?
  lastName             String?
  phoneNumber          String?
  role                 UserRole               @default(USER)
  tenantId             String?
  createdAt            DateTime               @default(now())
  updatedAt            DateTime
  Account              Account[]
  Payment              Payment[]
  Profile              Profile?
  Session              Session[]
  Tenant               Tenant?                @relation(fields: [tenantId], references: [id])
  // Subscription relationships
  subscriptions        Subscription[]
  regionSubscriptions  UserRegionSubscription[]
  // Casting submission conversion relation
  convertedSubmissions CastingSubmission[]
  // External actor conversion relation
  convertedExternalActors ExternalActor[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Questionnaire models
// Define the questionnaire model
model Questionnaire {
  id                     String                   @id @default(uuid())
  title                  String                   // Name of the questionnaire
  description            String?                  // Optional description
  studioId               String                   // Which studio created this questionnaire
  isActive               Boolean                  @default(true)  // Whether the questionnaire is active
  requiresApproval       Boolean                  @default(false) // Whether responses need approval
  createdAt              DateTime                 @default(now())
  updatedAt              DateTime                 @updatedAt
  
  // Relationships
  questions              QuestionnaireQuestion[]  // The questions in this questionnaire
  invitations            QuestionnaireInvitation[] // Invitations sent for this questionnaire
  responses              QuestionnaireResponse[]  // Responses to this questionnaire
  Studio                 Studio                   @relation(fields: [studioId], references: [id], onDelete: Cascade)
}

// Question types
enum QuestionType {
  SHORT_TEXT      // Short text answer
  LONG_TEXT       // Long text answer
  SINGLE_CHOICE   // Single selection from options
  MULTIPLE_CHOICE // Multiple selection from options
  RATING          // Rating scale (e.g., 1-5)
  DATE            // Date input
  FILE_UPLOAD     // File upload
  YES_NO          // Yes/No question
}

// Define the question model
model QuestionnaireQuestion {
  id                     String                @id @default(uuid())
  questionnaireId        String                // Which questionnaire this question belongs to
  text                   String                // The question text
  description            String?               // Optional description or help text
  type                   QuestionType          // Type of question
  isRequired             Boolean               @default(false) // Whether an answer is required
  order                  Int                   // Display order
  options                Json?                 // JSON array of options for choice questions
  metadata               Json?                 // Additional settings (e.g., min/max for ratings)
  createdAt              DateTime              @default(now())
  updatedAt              DateTime              @updatedAt
  
  // Relationships
  questionnaire          Questionnaire         @relation(fields: [questionnaireId], references: [id], onDelete: Cascade)
  answers                QuestionAnswer[]      // Answers to this question
}

// Define the invitation model
model QuestionnaireInvitation {
  id                     String                @id @default(uuid())
  questionnaireId        String                // Which questionnaire this invitation is for
  profileId              String                // Which talent profile is invited
  status                 String                @default("PENDING") // PENDING, ACCEPTED, DECLINED, COMPLETED
  sentAt                 DateTime              @default(now())
  expiresAt              DateTime?             // Optional expiration date
  completedAt            DateTime?             // When the questionnaire was completed
  message                String?               // Optional message to the talent
  
  // Relationships
  questionnaire          Questionnaire         @relation(fields: [questionnaireId], references: [id], onDelete: Cascade)
  profile                Profile               @relation(fields: [profileId], references: [id], onDelete: Cascade)
  response               QuestionnaireResponse? // The response to this invitation
  
  // Only one invitation per questionnaire/profile combination
  @@unique([questionnaireId, profileId])
}

// Define the response model (one per invitation)
model QuestionnaireResponse {
  id                     String                @id @default(uuid())
  invitationId           String                @unique // One-to-one with invitation
  questionnaireId        String                // Which questionnaire this response is for
  profileId              String                // Which talent profile submitted this response
  status                 String                @default("SUBMITTED") // SUBMITTED, APPROVED, REJECTED
  submittedAt            DateTime              @default(now())
  reviewedAt             DateTime?             // When the response was reviewed
  reviewNotes            String?               // Optional notes from the reviewer
  
  // Relationships
  invitation             QuestionnaireInvitation @relation(fields: [invitationId], references: [id], onDelete: Cascade)
  questionnaire          Questionnaire         @relation(fields: [questionnaireId], references: [id], onDelete: Cascade)
  profile                Profile               @relation(fields: [profileId], references: [id], onDelete: Cascade)
  answers                QuestionAnswer[]      // Individual answers in this response
}

// Define the answer model
model QuestionAnswer {
  id                     String                @id @default(uuid())
  responseId             String                // Which response this answer belongs to
  questionId             String                // Which question this answers
  textValue              String?               // Text answer
  choiceValues           Json?                 // Selected choices (array)
  fileUrl                String?               // URL to uploaded file
  createdAt              DateTime              @default(now())
  updatedAt              DateTime              @updatedAt
  
  // Relationships
  response               QuestionnaireResponse @relation(fields: [responseId], references: [id], onDelete: Cascade)
  question               QuestionnaireQuestion @relation(fields: [questionId], references: [id], onDelete: Cascade)
  
  // Each question can only be answered once per response
  @@unique([responseId, questionId])
}

// Custom Profile Field models
// Enum to define field types
enum FieldType {
  TEXT        // Single line text
  TEXTAREA    // Multi-line text
  NUMBER      // Numeric value
  DROPDOWN    // Selection from options
  BOOLEAN     // True/False toggle
  DATE        // Date picker
  EMAIL       // Email field
  URL         // URL field
  PHONE       // Phone number
}

// Enum to define which profile type the field belongs to
enum ProfileType {
  TALENT      // For talent profiles
  STUDIO      // For studio profiles
  BOTH        // For both profile types
}

// Custom field definition model
model ProfileField {
  id                    String          @id @default(uuid())
  name                  String          // Database field name (machine name)
  label                 String          // Display label for the field
  description           String?         // Optional field description/help text
  type                  FieldType       // Field type from the enum
  profileType           ProfileType     // Which profile type this field applies to
  isRequired            Boolean         @default(false) // Whether the field is required
  isVisible             Boolean         @default(true)  // Whether the field is visible
  defaultValue          String?         // Default value for the field
  placeholder           String?         // Placeholder text for input fields
  order                 Int             @default(0)     // Display order in forms
  createdAt             DateTime        @default(now())
  updatedAt             DateTime        @updatedAt
  isSystem              Boolean         @default(false) // Whether it's a built-in field
  groupName             String?         // Optional grouping for related fields
  
  // Relation to options for dropdown fields
  options               FieldOption[]   
  
  // Validation rules as JSON string (min, max, pattern, etc.)
  validationRules       String?         
}

// Option values for dropdown fields
model FieldOption {
  id                    String          @id @default(uuid())
  value                 String          // The stored value
  label                 String          // The display label
  color                 String?         // Optional color for styling
  order                 Int             @default(0) // Display order
  isDefault             Boolean         @default(false) // Whether this is the default option
  fieldId               String          // Foreign key to the parent field
  createdAt             DateTime        @default(now())
  updatedAt             DateTime        @updatedAt
  
  // Relation to parent field
  field                 ProfileField    @relation(fields: [fieldId], references: [id], onDelete: Cascade)
}

// Store field values for profiles
model ProfileFieldValue {
  id                    String          @id @default(uuid())
  profileId             String          // Foreign key to profile
  fieldId               String          // Foreign key to field definition
  value                 String          // The value as string (converted as needed)
  createdAt             DateTime        @default(now())
  updatedAt             DateTime        @updatedAt
  
  // Composite index to ensure unique field values per profile
  @@unique([profileId, fieldId])
}

// Store field values for studios
model StudioFieldValue {
  id                    String          @id @default(uuid())
  studioId              String          // Foreign key to studio
  fieldId               String          // Foreign key to field definition
  value                 String          // The value as string (converted as needed)
  createdAt             DateTime        @default(now())
  updatedAt             DateTime        @updatedAt
  
  // Composite index to ensure unique field values per studio
  @@unique([studioId, fieldId])
}

model ExternalActor {
  id                 String                @id @default(uuid())
  email              String?               // Now optional
  firstName          String                // Required
  lastName           String                // Required
  phoneNumber        String?
  notes              String?
  studioId           String
  status             String                @default("ACTIVE")   // ACTIVE, INVITED, CONVERTED
  convertedToTalentAt DateTime?
  convertedProfileId String?
  convertedToUserId  String?               // New field: Reference to the user account after conversion
  createdAt          DateTime              @default(now())
  updatedAt          DateTime              @updatedAt
  studio             Studio                @relation(fields: [studioId], references: [id], onDelete: Cascade)
  convertedProfile   Profile?              @relation(fields: [convertedProfileId], references: [id])
  convertedToUser    User?                 @relation(fields: [convertedToUserId], references: [id]) // New relation to User
  projects           ExternalActorProject[]
  scenes             SceneExternalActor[]
  submissions        CastingSubmission[]

  // Modified unique constraint to handle null email values
  @@unique([email, studioId], name: "unique_email_per_studio")
  @@index([studioId, firstName, lastName], name: "idx_external_actor_name")
}

model ExternalActorProject {
  id                 String               @id @default(uuid())
  externalActorId    String
  projectId          String
  role               String?
  notes              String?
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  externalActor      ExternalActor        @relation(fields: [externalActorId], references: [id], onDelete: Cascade)
  project            Project              @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

// Subscription models (new)
// Subscription plan definition
model SubscriptionPlan {
  id                String         @id @default(uuid())
  name              String         // e.g., "Basic", "Pro", "Enterprise"
  description       String?
  price             Float          // Monthly price in dollars
  interval          String         @default("month") // "month", "year"
  features          Json?          // Array of feature names included in this plan
  isActive          Boolean        @default(true)
  stripePriceId     String?        // Stripe Price ID for recurring billing
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  subscriptions     Subscription[]
}

// User subscription status
model Subscription {
  id                  String            @id @default(uuid())
  userId              String
  studioId            String?
  planId              String
  status              SubscriptionStatus @default(ACTIVE)
  stripeCustomerId    String?           // Stripe Customer ID
  stripeSubscriptionId String?          // Stripe Subscription ID
  currentPeriodStart  DateTime
  currentPeriodEnd    DateTime
  cancelAtPeriodEnd   Boolean           @default(false)
  canceledAt          DateTime?
  // Track multi-region discount
  multiRegionDiscount Float?            // Applied discount percentage
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt
  user                User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  studio              Studio?           @relation(fields: [studioId], references: [id], onDelete: SetNull)
  plan                SubscriptionPlan  @relation(fields: [planId], references: [id])
  features            SubscriptionFeature[]
  // Relation to region subscriptions
  regionSubscriptions UserRegionSubscription[]
}

// Subscription statuses
enum SubscriptionStatus {
  ACTIVE
  PAST_DUE
  CANCELED
  INCOMPLETE
  INCOMPLETE_EXPIRED
  TRIALING
  UNPAID
}

// Subscription feature access
model SubscriptionFeature {
  id              String       @id @default(uuid())
  subscriptionId  String
  featureKey      String       // Unique key for the feature (e.g., "max_locations", "advanced_search")
  featureValue    Json?        // Could be a boolean, number, or other value based on feature
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  subscription    Subscription @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)

  @@unique([subscriptionId, featureKey])
}

// Feature Flag definitions
model FeatureFlag {
  id              String    @id @default(uuid())
  key             String    @unique // Unique identifier for the feature
  name            String    // Display name
  description     String?
  defaultValue    Boolean   @default(false) // Default setting for users without subscription
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

// Region model definition
model Region {
  id             String           @id @default(uuid())
  name           String           @unique  // Region name (e.g., "West Coast", "Northeast")
  description    String?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  // Relations
  subscriptionPlans RegionSubscriptionPlan[]
  locations      Location[]       // Locations within this region
  castingCalls   CastingCall[]    // Casting calls for this region
  
  // Stats helpers - profiles and studios associated with this region
  ProfileRegion  ProfileRegion[]
  StudioRegion   StudioRegion[]
}

// Junction table for profiles and regions
model ProfileRegion {
  profileId      String
  regionId       String
  createdAt      DateTime         @default(now())
  profile        Profile          @relation(fields: [profileId], references: [id], onDelete: Cascade)
  region         Region           @relation(fields: [regionId], references: [id], onDelete: Cascade)
  
  @@id([profileId, regionId])
}

// Junction table for studios and regions
model StudioRegion {
  studioId       String
  regionId       String
  createdAt      DateTime         @default(now())
  studio         Studio           @relation(fields: [studioId], references: [id], onDelete: Cascade)
  region         Region           @relation(fields: [regionId], references: [id], onDelete: Cascade)
  
  @@id([studioId, regionId])
}

// Region-specific subscription plan
model RegionSubscriptionPlan {
  id             String           @id @default(uuid())
  regionId       String           // The region this plan applies to
  name           String           // Plan name
  description    String?
  price          Float            // Base price in dollars
  isActive       Boolean          @default(true)
  stripePriceId  String?          // Stripe Price ID for this regional plan
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  
  // Relations
  region         Region           @relation(fields: [regionId], references: [id], onDelete: Cascade)
  userSubscriptions UserRegionSubscription[]
}

// Multi-region discount tiers
model MultiRegionDiscount {
  id             String           @id @default(uuid())
  regionCount    Int              // Number of regions
  discountPercentage Float        // Discount percentage (0-100)
  active         Boolean          @default(true)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
}

// User's subscription to a specific region plan
model UserRegionSubscription {
  id                 String                 @id @default(uuid())
  userId             String
  regionPlanId       String
  mainSubscriptionId String                // Reference to the main subscription
  status             SubscriptionStatus     @default(ACTIVE)
  stripeItemId       String?                // Stripe Subscription Item ID
  currentPeriodStart DateTime
  currentPeriodEnd   DateTime
  createdAt          DateTime               @default(now())
  updatedAt          DateTime               @updatedAt
  
  // Relations
  user               User                   @relation(fields: [userId], references: [id], onDelete: Cascade)
  regionPlan         RegionSubscriptionPlan @relation(fields: [regionPlanId], references: [id])
  mainSubscription   Subscription           @relation(fields: [mainSubscriptionId], references: [id], onDelete: Cascade)
  
  @@unique([userId, regionPlanId])
}

// Casting Code models for the QR code feature
model CastingCode {
  id          String             @id @default(uuid())
  code        String             @unique
  name        String
  description String?
  isActive    Boolean            @default(true)
  expiresAt   DateTime?
  studioId    String
  projectId   String?
  surveyFields Json?             // Store custom survey fields as JSON
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  
  // Relations
  studio      Studio             @relation(fields: [studioId], references: [id], onDelete: Cascade)
  project     Project?           @relation(fields: [projectId], references: [id], onDelete: SetNull)
  submissions CastingSubmission[]
}

model CastingSubmission {
  id                  String        @id @default(uuid())
  firstName           String
  lastName            String
  email               String?
  phoneNumber         String?
  message             String?
  externalActorId     String?
  castingCodeId       String
  status              String        @default("PENDING") // PENDING, APPROVED, REJECTED, CONVERTED
  convertedToProfileId String?
  convertedUserId     String?       // New field: User ID if the submission is converted to a user account
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt
  
  // Relations
  castingCode         CastingCode   @relation(fields: [castingCodeId], references: [id], onDelete: Cascade)
  externalActor       ExternalActor? @relation(fields: [externalActorId], references: [id], onDelete: SetNull)
  convertedToProfile  Profile?      @relation(fields: [convertedToProfileId], references: [id], onDelete: SetNull)
  convertedUser       User?         @relation(fields: [convertedUserId], references: [id], onDelete: SetNull) // Relation to the User model
  survey              CastingSubmissionSurvey?
}

// New model to store survey responses for casting submissions
model CastingSubmissionSurvey {
  id           String           @id @default(uuid())
  submissionId String           @unique
  responses    Json             // Store survey responses as JSON
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt

  // Relations
  submission   CastingSubmission @relation(fields: [submissionId], references: [id], onDelete: Cascade)
}

// Talent Requirements model for defining roles in projects
model TalentRequirement {
  id                String   @id @default(uuid())
  title             String
  description       String?
  isActive          Boolean  @default(true)
  gender            String?
  minAge            String?
  maxAge            String?
  ethnicity         String?
  height            String?
  skills            String?
  otherRequirements String?
  survey            Json?    // Store custom survey fields as JSON
  projectId         String
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  project           Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)

  // Indices for query performance
  @@index([projectId])
  @@index([isActive])
}