generator client {
  provider = "prisma-client-js"
  // This ensures the client matches the exact DB shape, important for SQLite
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  User              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Application {
  id            String      @id
  status        String      @default("PENDING")
  message       String?
  profileId     String
  castingCallId String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime
  CastingCall   CastingCall @relation(fields: [castingCallId], references: [id])
  Profile       Profile     @relation(fields: [profileId], references: [id])
}

model CastingCall {
  id           String        @id
  title        String
  description  String
  requirements String?
  compensation String?
  startDate    DateTime?
  endDate      DateTime?
  status       String        @default("OPEN")
  studioId     String
  locationId   String?
  projectId    String?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime
  Application  Application[]
  Project      Project?      @relation(fields: [projectId], references: [id])
  Location     Location?     @relation(fields: [locationId], references: [id])
  Studio       Studio        @relation(fields: [studioId], references: [id])
  Skill        Skill[]
}

model Location {
  id          String        @id
  name        String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime
  CastingCall CastingCall[]
  Scene       Scene[]
  Profile     Profile[]
  Studio      Studio[]
}

model Message {
  id                                        String   @id
  content                                   String
  subject                                   String   @default("New Message")
  isRead                                    Boolean  @default(false)
  isArchived                                Boolean  @default(false)
  studioSenderId                            String?
  talentReceiverId                          String?
  talentSenderId                            String?
  studioReceiverId                          String?
  relatedToProjectId                        String?
  relatedToCastingCallId                    String?
  createdAt                                 DateTime @default(now())
  Studio_Message_studioReceiverIdToStudio   Studio?  @relation("Message_studioReceiverIdToStudio", fields: [studioReceiverId], references: [id])
  Profile_Message_talentSenderIdToProfile   Profile? @relation("Message_talentSenderIdToProfile", fields: [talentSenderId], references: [id])
  Profile_Message_talentReceiverIdToProfile Profile? @relation("Message_talentReceiverIdToProfile", fields: [talentReceiverId], references: [id])
  Studio_Message_studioSenderIdToStudio     Studio?  @relation("Message_studioSenderIdToStudio", fields: [studioSenderId], references: [id])
}

model Payment {
  id        String   @id
  amount    Float
  currency  String   @default("usd")
  status    String   @default("PENDING")
  studioId  String?
  userId    String?
  stripeId  String?  @unique
  createdAt DateTime @default(now())
  updatedAt DateTime
  User      User?    @relation(fields: [userId], references: [id])
  Studio    Studio?  @relation(fields: [studioId], references: [id])
}

model Profile {
  id                                        String                      @id
  userId                                    String                      @unique
  headshotUrl                               String?
  bio                                       String?
  height                                    String?
  weight                                    String?
  hairColor                                 String?
  eyeColor                                  String?
  availability                              Boolean                     @default(true)
  createdAt                                 DateTime                    @default(now())
  updatedAt                                 DateTime
  ethnicity                                 String?
  experience                                String?
  gender                                    String?
  languages                                 String?
  Application                               Application[]
  Message_Message_talentSenderIdToProfile   Message[]                   @relation("Message_talentSenderIdToProfile")
  Message_Message_talentReceiverIdToProfile Message[]                   @relation("Message_talentReceiverIdToProfile")
  User                                      User                        @relation(fields: [userId], references: [id], onDelete: Cascade)
  ProfileImage                              ProfileImage[]
  ProjectMember                             ProjectMember[]
  SceneTalent                               SceneTalent[]
  StudioNote                                StudioNote[]
  Location                                  Location[]
  Skill                                     Skill[]
  QuestionnaireInvitation                   QuestionnaireInvitation[]
  QuestionnaireResponse                     QuestionnaireResponse[]
}

model ProfileImage {
  id        String   @id
  url       String
  isPrimary Boolean  @default(false)
  profileId String
  createdAt DateTime @default(now())
  updatedAt DateTime
  Profile   Profile  @relation(fields: [profileId], references: [id], onDelete: Cascade)
}

model Project {
  id            String          @id
  title         String
  description   String?
  startDate     DateTime?
  endDate       DateTime?
  status        String          @default("PLANNING")
  studioId      String
  isArchived    Boolean         @default(false)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime
  CastingCall   CastingCall[]
  Studio        Studio          @relation(fields: [studioId], references: [id])
  ProjectMember ProjectMember[]
  Scene         Scene[]
}

model ProjectMember {
  id        String   @id
  role      String?
  notes     String?
  projectId String
  profileId String
  createdAt DateTime @default(now())
  updatedAt DateTime
  Profile   Profile  @relation(fields: [profileId], references: [id])
  Project   Project  @relation(fields: [projectId], references: [id])
}

model Scene {
  id           String        @id
  projectId    String
  title        String
  description  String?
  locationId   String?
  shootDate    DateTime?
  duration     Int?
  talentNeeded Int?
  status       String        @default("PLANNING")
  createdAt    DateTime      @default(now())
  updatedAt    DateTime
  Location     Location?     @relation(fields: [locationId], references: [id])
  Project      Project       @relation(fields: [projectId], references: [id])
  SceneTalent  SceneTalent[]
}

model SceneTalent {
  id        String   @id
  sceneId   String
  profileId String
  role      String?
  notes     String?
  status    String   @default("CONFIRMED")
  createdAt DateTime @default(now())
  updatedAt DateTime
  Profile   Profile  @relation(fields: [profileId], references: [id])
  Scene     Scene    @relation(fields: [sceneId], references: [id])
}

model Session {
  id           String   @id
  sessionToken String   @unique
  userId       String
  expires      DateTime
  User         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Skill {
  id          String        @id
  name        String        @unique
  createdAt   DateTime      @default(now())
  updatedAt   DateTime
  CastingCall CastingCall[]
  Profile     Profile[]
}

model Studio {
  id                                       String                  @id
  name                                     String
  description                              String?
  tenantId                                 String                  @unique
  contactName                              String?
  contactEmail                             String?
  contactPhone                             String?
  website                                  String?
  createdAt                                DateTime                @default(now())
  updatedAt                                DateTime
  CastingCall                              CastingCall[]
  Message_Message_studioReceiverIdToStudio Message[]               @relation("Message_studioReceiverIdToStudio")
  Message_Message_studioSenderIdToStudio   Message[]               @relation("Message_studioSenderIdToStudio")
  Payment                                  Payment[]
  Project                                  Project[]
  Tenant                                   Tenant                  @relation(fields: [tenantId], references: [id])
  StudioNote                               StudioNote[]
  Location                                 Location[]
  Questionnaire                            Questionnaire[]
}

model StudioNote {
  id        String   @id
  content   String
  studioId  String
  profileId String
  createdAt DateTime @default(now())
  updatedAt DateTime
  Profile   Profile  @relation(fields: [profileId], references: [id], onDelete: Cascade)
  Studio    Studio   @relation(fields: [studioId], references: [id], onDelete: Cascade)
}

model Tenant {
  id        String   @id
  name      String
  type      String
  createdAt DateTime @default(now())
  updatedAt DateTime
  Studio    Studio?
  User      User[]
}

// Define user roles
enum UserRole {
  USER
  ADMIN
  SUPER_ADMIN
}

model User {
  id        String    @id
  email     String    @unique
  password  String?
  firstName String?
  lastName  String?
  role      UserRole  @default(USER)
  tenantId  String?
  createdAt DateTime  @default(now())
  updatedAt DateTime
  Account   Account[]
  Payment   Payment[]
  Profile   Profile?
  Session   Session[]
  Tenant    Tenant?   @relation(fields: [tenantId], references: [id])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Questionnaire models
// Define the questionnaire model
model Questionnaire {
  id                     String                   @id @default(uuid())
  title                  String                   // Name of the questionnaire
  description            String?                  // Optional description
  studioId               String                   // Which studio created this questionnaire
  isActive               Boolean                  @default(true)  // Whether the questionnaire is active
  requiresApproval       Boolean                  @default(false) // Whether responses need approval
  createdAt              DateTime                 @default(now())
  updatedAt              DateTime                 @updatedAt
  
  // Relationships
  questions              QuestionnaireQuestion[]  // The questions in this questionnaire
  invitations            QuestionnaireInvitation[] // Invitations sent for this questionnaire
  responses              QuestionnaireResponse[]  // Responses to this questionnaire
  Studio                 Studio                   @relation(fields: [studioId], references: [id], onDelete: Cascade)
}

// Question types
enum QuestionType {
  SHORT_TEXT      // Short text answer
  LONG_TEXT       // Long text answer
  SINGLE_CHOICE   // Single selection from options
  MULTIPLE_CHOICE // Multiple selection from options
  RATING          // Rating scale (e.g., 1-5)
  DATE            // Date input
  FILE_UPLOAD     // File upload
  YES_NO          // Yes/No question
}

// Define the question model
model QuestionnaireQuestion {
  id                     String                @id @default(uuid())
  questionnaireId        String                // Which questionnaire this question belongs to
  text                   String                // The question text
  description            String?               // Optional description or help text
  type                   QuestionType          // Type of question
  isRequired             Boolean               @default(false) // Whether an answer is required
  order                  Int                   // Display order
  options                Json?                 // JSON array of options for choice questions
  metadata               Json?                 // Additional settings (e.g., min/max for ratings)
  createdAt              DateTime              @default(now())
  updatedAt              DateTime              @updatedAt
  
  // Relationships
  questionnaire          Questionnaire         @relation(fields: [questionnaireId], references: [id], onDelete: Cascade)
  answers                QuestionAnswer[]      // Answers to this question
}

// Define the invitation model
model QuestionnaireInvitation {
  id                     String                @id @default(uuid())
  questionnaireId        String                // Which questionnaire this invitation is for
  profileId              String                // Which talent profile is invited
  status                 String                @default("PENDING") // PENDING, ACCEPTED, DECLINED, COMPLETED
  sentAt                 DateTime              @default(now())
  expiresAt              DateTime?             // Optional expiration date
  completedAt            DateTime?             // When the questionnaire was completed
  message                String?               // Optional message to the talent
  
  // Relationships
  questionnaire          Questionnaire         @relation(fields: [questionnaireId], references: [id], onDelete: Cascade)
  profile                Profile               @relation(fields: [profileId], references: [id], onDelete: Cascade)
  response               QuestionnaireResponse? // The response to this invitation
  
  // Only one invitation per questionnaire/profile combination
  @@unique([questionnaireId, profileId])
}

// Define the response model (one per invitation)
model QuestionnaireResponse {
  id                     String                @id @default(uuid())
  invitationId           String                @unique // One-to-one with invitation
  questionnaireId        String                // Which questionnaire this response is for
  profileId              String                // Which talent profile submitted this response
  status                 String                @default("SUBMITTED") // SUBMITTED, APPROVED, REJECTED
  submittedAt            DateTime              @default(now())
  reviewedAt             DateTime?             // When the response was reviewed
  reviewNotes            String?               // Optional notes from the reviewer
  
  // Relationships
  invitation             QuestionnaireInvitation @relation(fields: [invitationId], references: [id], onDelete: Cascade)
  questionnaire          Questionnaire         @relation(fields: [questionnaireId], references: [id], onDelete: Cascade)
  profile                Profile               @relation(fields: [profileId], references: [id], onDelete: Cascade)
  answers                QuestionAnswer[]      // Individual answers in this response
}

// Define the answer model
model QuestionAnswer {
  id                     String                @id @default(uuid())
  responseId             String                // Which response this answer belongs to
  questionId             String                // Which question this answers
  textValue              String?               // Text answer
  choiceValues           Json?                 // Selected choices (array)
  fileUrl                String?               // URL to uploaded file
  createdAt              DateTime              @default(now())
  updatedAt              DateTime              @updatedAt
  
  // Relationships
  response               QuestionnaireResponse @relation(fields: [responseId], references: [id], onDelete: Cascade)
  question               QuestionnaireQuestion @relation(fields: [questionId], references: [id], onDelete: Cascade)
  
  // Each question can only be answered once per response
  @@unique([responseId, questionId])
}

// Custom Profile Field models
// Enum to define field types
enum FieldType {
  TEXT        // Single line text
  TEXTAREA    // Multi-line text
  NUMBER      // Numeric value
  DROPDOWN    // Selection from options
  BOOLEAN     // True/False toggle
  DATE        // Date picker
  EMAIL       // Email field
  URL         // URL field
  PHONE       // Phone number
}

// Enum to define which profile type the field belongs to
enum ProfileType {
  TALENT      // For talent profiles
  STUDIO      // For studio profiles
  BOTH        // For both profile types
}

// Custom field definition model
model ProfileField {
  id                    String          @id @default(uuid())
  name                  String          // Database field name (machine name)
  label                 String          // Display label for the field
  description           String?         // Optional field description/help text
  type                  FieldType       // Field type from the enum
  profileType           ProfileType     // Which profile type this field applies to
  isRequired            Boolean         @default(false) // Whether the field is required
  isVisible             Boolean         @default(true)  // Whether the field is visible
  defaultValue          String?         // Default value for the field
  placeholder           String?         // Placeholder text for input fields
  order                 Int             @default(0)     // Display order in forms
  createdAt             DateTime        @default(now())
  updatedAt             DateTime        @updatedAt
  isSystem              Boolean         @default(false) // Whether it's a built-in field
  groupName             String?         // Optional grouping for related fields
  
  // Relation to options for dropdown fields
  options               FieldOption[]   
  
  // Validation rules as JSON string (min, max, pattern, etc.)
  validationRules       String?         
}

// Option values for dropdown fields
model FieldOption {
  id                    String          @id @default(uuid())
  value                 String          // The stored value
  label                 String          // The display label
  color                 String?         // Optional color for styling
  order                 Int             @default(0) // Display order
  isDefault             Boolean         @default(false) // Whether this is the default option
  fieldId               String          // Foreign key to the parent field
  createdAt             DateTime        @default(now())
  updatedAt             DateTime        @updatedAt
  
  // Relation to parent field
  field                 ProfileField    @relation(fields: [fieldId], references: [id], onDelete: Cascade)
}

// Store field values for profiles
model ProfileFieldValue {
  id                    String          @id @default(uuid())
  profileId             String          // Foreign key to profile
  fieldId               String          // Foreign key to field definition
  value                 String          // The value as string (converted as needed)
  createdAt             DateTime        @default(now())
  updatedAt             DateTime        @updatedAt
  
  // Composite index to ensure unique field values per profile
  @@unique([profileId, fieldId])
}

// Store field values for studios
model StudioFieldValue {
  id                    String          @id @default(uuid())
  studioId              String          // Foreign key to studio
  fieldId               String          // Foreign key to field definition
  value                 String          // The value as string (converted as needed)
  createdAt             DateTime        @default(now())
  updatedAt             DateTime        @updatedAt
  
  // Composite index to ensure unique field values per studio
  @@unique([studioId, fieldId])
}